name: "LeNet_norm1"
layer {
  name: "math"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/imagenet/math_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
  #input_param { shape: {dim: 1 dim: 3 dim: 72 dim 32 }} 
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  #param {
    #lr_mult: 2
 # }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      #type: "xavier"
      type: "gaussian"
      std: 0.0001
    }
    #bias_filler {
    #  type: "constant"
    #}
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "bn1"
  type: "BatchNorm"
  bottom: "pool1"
  top: "bn1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  name: "Sigmoid1"
  type: "Sigmoid"
  bottom: "bn1"
  top: "Sigmoid1"
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "Sigmoid1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  #param {
  #  lr_mult: 2
  #}
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      #type: "xavier"
      type: "gaussian"
      std: 0.01
    }
    #bias_filler {
    #  type: "constant"
    #}
  }
}

layer {
  name: "bn2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "bn2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "Sigmoid2"
  type: "Sigmoid"
  bottom: "bn2"
  top: "Sigmoid2"
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "Sigmoid2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 19
    weight_filler {
      #type: "xavier"
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
#layer {
#  name: "relu1"
#  type: "ReLU"
#  bottom: "ip1"
#  top: "ip1"
#}
#layer {
#  name: "ip2"
#  type: "InnerProduct"
#  bottom: "ip1"
#  top: "ip2"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 19
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}

#layer {
#  name: "loss"
#  type: "Softmax"
#  bottom: "ip2"
#  top: "loss"
#}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}

